/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) CompuPhase, 2000-2024
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not
 *  use this file except in compliance with the License. You may obtain a copy
 *  of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  License for the specific language governing permissions and limitations
 *  under the License.
 *
 *  Version: $Id: sc5.sch 7108 2024-02-19 22:02:45Z thiadmer $
 */

SC_FUNC int strexpand(char *dest, const unsigned char *source, int maxlen, const unsigned char pairtable[128][2]);

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
const unsigned char errstr_table[128][2] = {
  {101,32}, {111,110}, {105,110}, {116,32}, {97,114}, {100,32}, {116,105}, {115,32}, {37,115}, {101,114}, {134,129}, {34,136}, {139,34}, {97,108}, {101,110}, {117,110},
  {121,32}, {115,105}, {111,114}, {97,116}, {114,101}, {110,111}, {97,110}, {100,101}, {32,140}, {101,133}, {109,142}, {115,116}, {114,97}, {109,98}, {98,108}, {138,32},
  {143,99}, {97,32}, {102,160}, {111,108}, {117,115}, {149,131}, {118,141}, {132,156}, {115,121}, {168,157}, {169,163}, {103,32}, {105,133}, {115,145}, {105,135}, {146,32},
  {116,104}, {167,144}, {166,172}, {101,120}, {97,158}, {130,178}, {151,102}, {101,100}, {99,104}, {117,154}, {137,32}, {103,185}, {132,187}, {111,102}, {162,159}, {130,171},
  {109,97}, {118,132}, {112,148}, {170,152}, {105,180}, {193,196}, {116,111}, {99,129}, {101,135}, {189,32}, {182,130}, {98,128}, {164,131}, {188,131}, {155,147}, {109,147},
  {34,32}, {44,32}, {195,41}, {109,204}, {40,210}, {105,99}, {97,99}, {111,112}, {145,122}, {197,128}, {102,146}, {58,152}, {129,32}, {141,32}, {100,105}, {101,108},
  {115,117}, {162,138}, {110,32}, {130,32}, {104,97}, {99,111}, {108,111}, {199,155}, {150,32}, {194,173}, {211,203}, {102,105}, {179,233}, {117,108}, {150,131}, {108,128},
  {118,128}, {215,137}, {192,144}, {97,159}, {58,32}, {207,184}, {97,109}, {100,111}, {112,111}, {97,115}, {110,117}, {154,116}, {176,128}, {116,137}, {250,157}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static const char *errmsg[] = {
#ifdef SCPACK
/*000*/  "*",   /* scpack does not like empty strings */
/*001*/  "expected token: \"%s\", but found \"%s\"",
/*002*/  "only a single statement (or expression) can follow each \"case\"",
/*003*/  "declaration of a local variable must appear in a compound block",
/*004*/  "function \"%s\" is not implemented",
/*005*/  "function may not have arguments",
/*006*/  "must be assigned to an array",
/*007*/  "operator cannot be redefined",
/*008*/  "must be a constant expression; assumed zero",
/*009*/  "invalid array size (negative, zero or out of bounds)",
/*010*/  "invalid function or declaration",
/*011*/  "invalid outside functions",
/*012*/  "invalid function call, not a valid address",
/*013*/  "no entry point (no public functions)",
/*014*/  "invalid statement; not in switch",
/*015*/  "\"default\" case must be the last case in switch statement",
/*016*/  "multiple defaults in \"switch\"",
/*017*/  "undefined symbol \"%s\"",
/*018*/  "initialization data exceeds declared size",
/*019*/  "not a label: \"%s\"",
/*020*/  "invalid symbol name \"%s\"",
/*021*/  "symbol already defined: \"%s\"",
/*022*/  "must be lvalue (non-constant)",
/*023*/  "array assignment must be simple assignment",
/*024*/  "\"break\" or \"continue\" is out of context",
/*025*/  "function heading differs from prototype",
/*026*/  "no matching \"#if...\"",
/*027*/  "invalid character constant",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"",
/*029*/  "invalid expression, assumed zero",
/*030*/  "compound statement not closed at the end of file (started at line %d)",
/*031*/  "unknown directive",
/*032*/  "array index out of bounds (variable \"%s\")",
/*033*/  "array must be indexed (variable \"%s\")",
/*034*/  "argument does not have a default value (argument %d)",
/*035*/  "argument type mismatch (argument %d)",
/*036*/  "empty statement",
/*037*/  "invalid string (possibly non-terminated string)",
/*038*/  "extra characters on line",
/*039*/  "constant symbol has no size",
/*040*/  "duplicate \"case\" label (value %d)",
/*041*/  "invalid ellipsis, array size is not known",
/*042*/  "invalid combination of class specifiers",
/*043*/  "character constant %ld exceeds range for a packed string/array",
/*044*/  "positional parameters must precede all named parameters",
/*045*/  "too many function arguments",
/*046*/  "unknown array size (variable \"%s\")",
/*047*/  "array sizes/definitions do not match, or destination array is too small",
/*048*/  "array dimensions do not match",
/*049*/  "invalid line continuation",
/*050*/  "invalid range",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions and for named indices",
/*052*/  "multi-dimensional arrays must be fully initialized",
/*053*/  "exceeding maximum number of dimensions",
/*054*/  "unmatched closing brace (\"}\")",
/*055*/  "start of function body without function header",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")",
/*057*/  "unfinished expression before compiler directive",
/*058*/  "duplicate argument; same argument is passed twice",
/*059*/  "function argument may not have a default value (variable \"%s\")",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive",
/*062*/  "number of operands does not fit the operator",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"",
/*064*/  "cannot change predefined operators",
/*065*/  "function argument may only have a single tag (argument %d)",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")",
/*068*/  "invalid rational number precision in #pragma",
/*069*/  "rational number format already defined",
/*070*/  "rational number support was not enabled",
/*071*/  "user-defined operator must be declared before use (function \"%s\")",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols",
/*073*/  "function argument must be an array (argument \"%s\")",
/*074*/  "#define pattern must start with an alphabetic character",
/*075*/  "input line too long (after substitutions)",
/*076*/  "syntax error in the expression, or invalid function call",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s",
/*078*/  "function uses both \"return\" and \"return <value>\"",
/*079*/  "inconsistent return types (array & non-array)",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")",
/*081*/  "expression with tag override must appear between parentheses",
/*082*/  "user-defined operators and native functions may not have states",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")",
/*085*/  "no states are defined for symbol \"%s\"",
/*086*/  "unknown automaton \"%s\"",
/*087*/  "unknown state \"%s\" for automaton \"%s\"",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")",
/*089*/  "state variables may not be initialized (symbol \"%s\")",
/*090*/  "public functions may not return arrays (symbol \"%s\")",
/*091*/  "first constant in an enumerated list must be initialized (symbol \"%s\")",
/*092*/  "invalid number format",
/*093*/  "array fields with a size may only appear in the final dimension",
/*094*/  "invalid subscript, subscript does not match array definition regarding named indices (symbol \"%s\")",
/*095*/  "multiple default entry points: both main() and @start() are declared",
/*096*/  "\"#pragma warning push\" is lacking a matching \"pop\"",
/*097*/  "\"#pragma warning pop\" is lacking a matching \"push\""
#else
  "*",
  "\263pect\231\306k\216\333\321bu\203fo\217\205\214",
  "\201l\220\241s\202g\357\316e\232\203(\257\354\201) c\350f\243\346w ea\270 \042c\371e\042",
  "\227cl\204\363\311\241\346c\335\331\323appe\204 \343\241\345m\370\217\205\236ock",
  "\341\230 \256\245imple\373\267",
  "\276\362\245\344\360\274ts",
  "\352a\255gn\231\306 \350\247y",
  "\361\223\257c\226\245\313\224\312\267",
  "\352\241\347\356\354\201; \371\340m\231z\211o",
  "\265\261\330\200(nega\206ve\321z\211o \257ou\203\311bo\217ds)",
  "\265\276\257\227cl\204a\212",
  "\265out\221d\200\341s",
  "\265\276c\215l\321\245\241\262add\224ss",
  "\225 \216tr\220\370\202\203(\225 pu\236\325 \341s)",
  "\265\316e\373; \245\343swit\270",
  "\042\266a\355t\320c\371\200\352\374l\371\203c\371\200\343swit\270 \316e\373",
  "m\355\206p\357\266a\355t\207\343\042swit\270\042",
  "\217\312\231\303",
  "\202i\206\215iz\363d\223\241\263ce\267\207\227cl\204\231\330e",
  "\245\241lab\337\333",
  "\265\252 n\366\200\214",
  "\252 \215\224ad\220\312\267\333",
  "\352l\246u\200(n\201-\347\226t)",
  "\261a\255gn\232\203\352\221mp\357a\255gn\373",
  "\042b\224ak\320\257\042\307t\202ue\320\256ou\203\311\307t\263t",
  "\276head\277\336ff\211\207from pro\306type",
  "\225 \365\277\042#if...\042",
  "\265\270\204\326t\272\347\226t",
  "\265\340bscrip\203(\245\350\261\257\306o m\226\220\340bscripts)\333",
  "\265\354\201\321\371\340m\231z\211o",
  "\345m\370\217\205\316e\232\203\245c\346s\231a\203\374\216\205\311\353\357(\233\204t\231a\203l\202\200%d)",
  "\217k\225w\342\336\224c\206ve",
  "\261\202\227x ou\203\311bo\217d\207(\331\214)",
  "\261\352\202\227x\231(\331\214)",
  "\315\367\310\245\344\360\241\266a\355\203\246u\200(\315%d)",
  "\315typ\200mis\365 (\315%d)",
  "empt\220\316e\373",
  "\265\233r\277(\370\255\236\220n\201-\375m\202\223\231\233r\202g)",
  "\263t\234 \270\204\326\375\207\334l\202e",
  "\347\356\252 \344\207\225 \330e",
  "dupl\325\223\200\042c\371e\320lab\337 (\246u\200%d)",
  "\265\337lip\221s\321\261\330\200\256\245k\225wn",
  "\265\345\235\202\363\311cl\371\207speci\353\211s",
  "\270\204\326t\272\347\356%l\205\263ce\267\207r\226g\200f\257\241p\326k\231\233r\202g/\247y",
  "\370\221\212\335p\204\366e\375\207\323\302c\267\200\215l n\366\231p\204\366e\375s",
  "\306o m\226\220\276\274ts",
  "\217k\225w\342\261\330\200(\331\214)",
  "\261\330es/\312i\212\207\367 \245\365\321\257\227\233\202\363\261\256\306o sm\215l",
  "\261\336\232\221\201\207\367 \245\365",
  "\265l\202\200\307t\202ua\212",
  "\265r\226ge",
  "\265\340bscript\321\244\200\042[ ]\320\361\223\222\207\334\300j\257\336\232\221\201\207\226\205f\257n\366\231\202d\325es",
  "m\355\206-\336\232\221\201\335\247y\207\352f\355l\220\202i\206\215iz\267",
  "\263ce\267\277\300ximum \376\272\311\336\232\221\201s",
  "\217\365\231c\346s\277b\234c\200(\042}\042)",
  "\233\204\203\311\276bod\220wi\260ou\203\276head\211",
  "\247ys\321\346c\335\305\310\226\205\276\274t\207c\226\245\313pu\236\325 (\331\214)",
  "\217f\202ish\231\354\334be\332\200\345mpil\272\336\224c\206ve",
  "dupl\325\223\200\274t; s\366\200\315\256p\371s\231tw\325e",
  "\276\315\362\245\344\360\241\266a\355\203\246u\200(\331\214)",
  "m\355\206p\357\042#\337se\320\336\224c\206v\310betwe\216 \042#if ... #\216\336f\042",
  "\042#\337seif\320\336\224c\206\360f\243\346w\207\350\042#\337se\320\336\224c\206ve",
  "\376\272\311\361\226d\207\367\310\245\353\203\374\361\223\222",
  "\276\224\340l\203ta\253\311\361\223\222\230 \352\214",
  "c\226\245\270\226g\200\302\312\231\361\223\222s",
  "\276\315\362\201l\220\344\360\241s\202g\357ta\253(\315%d)",
  "\276\315\362\245\313\241\224f\211\216c\200\315\257\350\261(\315\214)",
  "\331c\226\245\313bo\260 \241\224f\211\216c\200\226\205\350\261(\331\214)",
  "\265\234\212\335\376\272\302ci\221\334\343#p\234g\300",
  "\234\212\335\376\272\332\300\203\215\224ad\220\312\267",
  "\234\212\335\376\272\340pp\222\203wa\207\245\216\264\267",
  "\244\211-\312\231\361\223\257\352\227cl\204\231be\332\200\244\200(\341\230)",
  "\042\330e\275\320\361\223\257\256\265\334\042\341\320\252s",
  "\276\315\352\350\261(\315\214)",
  "#\312\200p\223\375\342\323\233\204\203wi\260 \350\215p\344be\206c \270\204\326\375",
  "\202pu\203l\202\200\306o l\201\253(aft\272\340bs\206tu\212s)",
  "\250ntax \211r\257\343\374\354\201\321\257\265\276c\215l",
  "m\215\332m\231UTF-8 \216\345d\202g\321\257c\222rupt\231\353le\364\210",
  "\276\244\310bo\260 \042\224turn\320\226\205\042\224tur\342<\246ue>\042",
  "\202\307\221\233\216\203\224tur\342typ\310(\261& n\201-\247y)",
  "\217k\225w\342\252\321\257\245\241\347\356\252 \324",
  "\354\334wi\260 ta\253ov\211rid\200\323appe\204 betwe\216 p\204\216\260eses",
  "\244\211-\312\231\361\223\222\207\226\205na\206\360\341\207\362\245\344\360\316es",
  "\241\276\257\331\362\201l\220b\337\201\253\306 \241s\202g\357au\306\317\334\324",
  "\316\200\307fl\325t\364\201\200\311\374\316\310\256\215\224ad\220a\255gn\231\306 a\225\260\272imple\373\363\324",
  "\225 \316\310\204\200\312\231f\257\303",
  "\217k\225w\342au\306\317\201\230",
  "\217k\225w\342\316\200\214 f\257au\306\317\201\230",
  "pu\236\325 \305\310\226\205\346c\335\305\310\362\245\344\360\316\310\324",
  "\316\200\305\310\362\245\313\202i\206\215iz\231\324",
  "pu\236\325 \341\207\362\245\224tur\342\247y\207\324",
  "\353rs\203\347\356\343\350\216um\211\223\231lis\203\352\202i\206\215iz\231\324",
  "\265\376\272\332\317",
  "\261\353\337d\207wi\260 \241\330\200\362\201l\220appe\204 \343\374f\202\335\336\232\221\201",
  "\265\340bscript\321\340bscrip\203\367\310\245\365 \261\312i\237\224g\204d\277n\366\231\202d\325\310\324",
  "m\355\206p\357\266a\355\203\216tr\220\370\202ts\364bo\260 \300\202() \226\205@\233\204t() \204\200\227cl\204\267",
  "\042#p\234gm\241w\204n\277p\244h\320\256l\326k\277\241\365\277\042p\327\042",
  "\042#p\234gm\241w\204n\277p\327\320\256l\326k\277\241\365\277\042p\244h\042"
#endif
       };

static const char *fatalmsg[] = {
#ifdef SCPACK
/*100*/  "cannot read from file: \"%s\"",
/*101*/  "cannot write to file: \"%s\"",
/*102*/  "table overflow: \"%s\"",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*103*/  "insufficient memory",
/*104*/  "incompatible options: \"%s\" versus \"%s\"",
/*105*/  "numeric overflow, exceeding capacity",
/*106*/  "compiled script exceeds the maximum memory size (%ld bytes)",
/*107*/  "too many error messages on one line",
/*108*/  "codepage mapping file not found",
/*109*/  "invalid path: \"%s\"",
/*110*/  "assertion failed: %s",
/*111*/  "user error: %s"
/*112*/  "overlay function \"%s\" exceeds limit by %ld bytes"
#else
  "c\226\245\224a\205from \353le\333",
  "c\226\245writ\200\306 \353le\333",
  "t\264\200ov\211f\346w\333",
  "\202\340ff\325i\216\203mem\222y",
  "\202\345mpa\206\236\200\327\212s\333 v\211\340\207\214",
  "\372m\211\325 ov\211f\346w\321\263ce\267\277cap\326ity",
  "\345mpil\231scrip\203\263ce\267\207\374\300ximum mem\222\220\330\200(%l\205bytes)",
  "\306o m\226\220\211r\257messag\310\334\201\200l\202e",
  "\345\227pag\200\300pp\277\353\357\245fo\217d",
  "\265p\223h\333",
  "\371s\211\237fail\267\364\210",
  "\244\272\211r\222\364\210",
  "ov\211la\220\341\230 \263ce\267\207limi\203b\220%l\205bytes"
#endif
       };

static const char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters",
/*201*/  "redefinition of constant/macro (symbol \"%s\")",
/*202*/  "number of arguments does not match definition",
/*203*/  "symbol is never used: \"%s\"",
/*204*/  "symbol is assigned a value that is never used: \"%s\"",
/*205*/  "redundant code: constant expression is zero",
/*206*/  "redundant test: constant expression is non-zero",
/*207*/  "unknown #pragma",
/*208*/  "function \"%s\" is used before definition, a forward declaration is recommended",
/*209*/  "function \"%s\" should return a value",
/*210*/  "possible use of symbol before initialization: \"%s\"",
/*211*/  "possibly unintended assignment",
/*212*/  "possibly unintended bitwise operation",
/*213*/  "tag mismatch",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"",
/*215*/  "expression has no effect",
/*216*/  "nested comment",
/*217*/  "loose indentation",
/*218*/  "old style prototypes used with optional semicolons",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level",
/*220*/  "user warning: %s",
/*221*/  "label name \"%s\" shadows tag name",
/*222*/  "number of digits exceeds rational number precision",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")",
/*225*/  "unreachable code",
/*226*/  "a variable is assigned to itself (symbol \"%s\")",
/*227*/  "more initiallers than array fields",
/*228*/  "length of initialler exceeds size of the array field",
/*229*/  "mixing packed and unpacked array indexing or array assignment",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back",
/*231*/  "state specification on forward declaration is ignored",
/*232*/  "native function lacks a predefined index (symbol \"%s\")",
/*233*/  "state variable \"%s\" shadows a global variable",
/*234*/  "function is deprecated (symbol \"%s\") %s",
/*235*/  "public function lacks forward declaration (symbol \"%s\")",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)",
/*237*/  "recursive function \"%s\"",
/*238*/  "mixing string formats in concatenation"
#else
  "\303 \256tr\240\223\231\306 %\205\270\204\326\375s",
  "\224\312i\237\311\347\226t/\300cro \324",
  "\376\272\311\274t\207\367\310\245\365 \312i\212",
  "\252 \256nev\272\244\267\333",
  "\252 \256a\255gn\231\241\246u\200\260a\203\256nev\272\244\267\333",
  "\224d\217d\356\345\227\364\347\356\354\334\256z\211o",
  "\224d\217d\356te\233\364\347\356\354\334\256n\201-z\211o",
  "\217k\225w\342#p\234g\300",
  "\341\230 \256\244\231be\332\200\312i\212\321\241\332w\204\205\227cl\204\363\256\224\345m\232\227d",
  "\341\230 sho\355\205\224tur\342\241\246ue",
  "\370\255\236\200\244\200\311\252 be\332\200\202i\206\215iza\212\333",
  "\370\255\236\220\217\202t\216\227\205a\255gn\373",
  "\370\255\236\220\217\202t\216\227\205bitwis\200\361a\212",
  "ta\253mis\365",
  "\370\255\236\220\241\042\347\320\261\315wa\207\202t\216\227d\333",
  "\354\334\344\207\225 effect",
  "ne\233\231\345m\373",
  "\346os\200\202d\216ta\212",
  "\243\205\233y\357pro\306typ\310\244\231wi\260 \327\212\335sem\325\243\201s",
  "\346c\335\331\214 s\344\367w\207\241\331a\203\241\302c\267\277lev\337",
  "\244\272w\204n\202g\364\210",
  "lab\337 n\366\200\214 s\344\367w\207ta\253n\366e",
  "\376\272\311\336git\207\263ce\267\207\234\212\335\376\272\302ci\221\201",
  "\224d\217d\356\042\330e\275\042\364\315\330\200\256\215way\2071 \324",
  "\202\227\375m\202\223\200\261\330\200\343\042\330e\275\320\354\334\324",
  "\217\224a\270\264\200\345\227",
  "\241\331\256a\255gn\231\306 its\337f \324",
  "m\222\200\202i\206\215l\211\207\260\350\261\353\337ds",
  "l\216g\260 \311\202i\206\215l\272\263ce\267\207\330\200\311\374\261\353\337d",
  "mix\277p\326k\231\226\205\217p\326k\231\261\202\227x\277\257\261a\255gn\373",
  "\225 imple\373\363f\257\316\200\214 \343\341\230\321\225 f\215l-b\326k",
  "\316\200specif\325\363\334\332w\204\205\227cl\204\363\256ign\222\267",
  "na\206\360\276l\326k\207\241\302\312\231\202\227x \324",
  "\316\200\331\214 s\344\367w\207\241g\346b\335\305e",
  "\276\256\227\302c\223\231\324 \210",
  "pu\236\325 \276l\326k\207\332w\204\205\227cl\204\363\324",
  "\217k\225w\342p\204\366et\272\343\340bs\206tu\237(\202c\222\224c\203#\312\200p\223\375n)",
  "\224cur\221\360\341\230",
  "mix\277\233r\277\332\317\207\343\307c\223\216a\212"
#endif
       };

static const char *noticemsg[] = {
#ifdef SCPACK
/*000*/  "*",   /* scpack does not like empty strings */
/*001*/  "did you mean \"%s\"?",
/*002*/  "did you mean to use double quotes?",
/*003*/  "did you forget \"%s\" before the expression?",
/*004*/  "note: this is a keyword"
#else
  "*",
  "d\254you me\226\230?",
  "d\254you me\350\306 \244\200\367u\236\200quotes?",
  "d\254you \332ge\203\214 be\332\200\374\354\201?",
  "\225te\364\260\256\256\241keyw\222d"
#endif
       };

